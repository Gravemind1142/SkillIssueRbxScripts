--!strict
--# type=mod

-- !!! DO NOT EDIT ANYTHING UNDER SkillIssue FOLDER, EXCEPT FOR SkillIssue.Config
-- !!! DO NOT EDIT THIS FILE
-- !!! DO NOT EDIT THIS FILE

local module = {}

local groupService = game:GetService("GroupService")

local playersGroupInfo: {[number]: {number}} = {}
--[[
	Format:
	[userId] = {groupId,groupId,[...]},
	[...]
]]
-- test player user ids
playersGroupInfo[-1] = {12466785}
playersGroupInfo[-2] = {43565,3123,9879}

local playersPrimaryInfo: {[number]: number} = {}

local groupsAndAllies: {[number]: {number}} = {}
--[[
	Format:
	[groupId] = {allyId,allyId,[...]},
	[...]
]]

local groupInfoCache: {[number]: {any}} = {}

function module.GetGroupInfo(id: number): {any}
	local groupInfo = groupInfoCache[id]
	if groupInfo then
		return groupInfo
	else
		groupInfo = groupService:GetGroupInfoAsync(id)
		groupInfoCache[id] = groupInfo
		return groupInfo
	end
end

function module.IsInGroup(player: Player, id: number): boolean
	repeat task.wait() until playersGroupInfo[player.UserId]
	return table.find(playersGroupInfo[player.UserId],id) ~= nil
end

function module.RefreshPlayerGroups(player: Player): ()
	if player.UserId <= -1 then return end
	playersGroupInfo[player.UserId] = nil
	
	local success: boolean, response:any = pcall(function() return groupService:GetGroupsAsync(player.UserId) end)
	if not success then warn("groupService:GetGroupsAsync() failed: " .. response) playersGroupInfo[player.UserId] = {} return end
	
	local groupsList: {any} = response
	local groupIdsList: {number} = {}
	for _,group in ipairs(groupsList) do
		table.insert(groupIdsList,group["Id"])
		if group["IsPrimary"] then
			playersPrimaryInfo[player.UserId] = group["Id"]
		end
	end
	playersGroupInfo[player.UserId] = groupIdsList
end

function module.RefreshAllPlayerGroups(): ()
	for _,player in ipairs(game.Players:GetPlayers()) do
		module.RefreshPlayerGroups(player)
	end
end

game.Players.PlayerAdded:Connect(function(player)
	module.RefreshPlayerGroups(player)
end)

game.Players.PlayerRemoving:Connect(function(player)
	playersGroupInfo[player.UserId] = nil
end)

function module.GetMostCommonGroupIdFromPlayerList(playerList: {Player}): number
	local groupCount: {[number]: number} = {}
	
	for _,player: Player in ipairs(playerList) do
		
		local groupIdsList: {number} = playersGroupInfo[player.UserId]
		if not groupIdsList then continue end
		
		for _,groupId: number in ipairs(groupIdsList) do
			local isPrimary = playersPrimaryInfo[player.UserId] == groupId
			
			if not groupCount[groupId] then
				groupCount[groupId] = 0
			end
			groupCount[groupId] += 1
			if isPrimary then -- primary groups contribute 1.1 instead of 1 towards getting the most common group id
				groupCount[groupId] += 0.1
			end
		end
	end
	
	local groupId = next(groupCount)
	if not groupId then return 1 end
	local max = groupCount[groupId]
	
	for k, v in pairs(groupCount) do
		if groupCount[k] > max then
			groupId, max = k, v
		end
	end
	
	return groupId
end

return module
